#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class NumbersAndMatches {
public:
	int mvs[10][10];
	int rem[10][10];
	int mtch[10];
	int ncnt[10];
	void pre(){
		for(int i=0;i<=9;i++){
			for(int j=0;j<=9;j++){
				int tmp=mtch[i]^mtch[j];
				int cnt=0;
				for(int k=0;k<=9;k++)
					if((1<<k)&tmp)
						cnt++;
				rem[i][j]=ncnt[i]-ncnt[j];
				for(int k=0;k<=9;k++){
					if((1<<k)&(mtch[i]^mtch[j]))
						mvs[i][j]++;
				}
			}
		}
	}

	string n="";
	void lts(long long nm){
		while(nm){
			char c=(nm%10)+48;
			n+=c;
			nm/=10;
		}
		reverse(n.begin(),n.end());
	}

	long long dp[19][130][130][2];
	int k;
	//ind->position of cur digit,k->number of moves allowed, m->number of matches left
	long long solve(int ind,int tmpk,int m,string tmp){
		long long ret=0;
		if(ind==n.length()){
			if(tmpk/2<=k&&tmpk%2==0&&m==0)
				return 1;
			return 0;
		}
		if(k<0)
			return 0;
		if(dp[ind][tmpk][abs(m)][m>=0]!=-1)
			return dp[ind][tmpk][abs(m)][m>=0];

		for(int i=0;i<=9;i++){
			char c=(char)(i+48);
			ret+=solve(ind+1,tmpk+mvs[n[ind]-48][i],m-ncnt[i],tmp+c);
		}
		return dp[ind][tmpk][abs(m)][m>=0]=ret;
	}
	long long differentNumbers(long long N, int K) {
		ncnt[0]=ncnt[6]=ncnt[9]=6;ncnt[2]=ncnt[3]=ncnt[5]=5;
		ncnt[1]=ncnt[7]=3;ncnt[4]=4;ncnt[8]=7;
		mtch[0]=(1<<0)|(1<<1)|(1<<3)|(1<<4)|(1<<5)|(1<<6);
		mtch[1]=(1<<3)|(1<<5)|(1<<6);
		mtch[2]=(1<<0)|(1<<2)|(1<<3)|(1<<4)|(1<<5);
		mtch[3]=(1<<0)|(1<<2)|(1<<3)|(1<<5)|(1<<6);
		mtch[4]=(1<<1)|(1<<2)|(1<<3)|(1<<6);
		mtch[5]=(1<<0)|(1<<1)|(1<<2)|(1<<5)|(1<<6);
		mtch[6]=(1<<0)|(1<<1)|(1<<2)|(1<<4)|(1<<5)|(1<<6);
		mtch[7]=(1<<3)|(1<<0)|(1<<6);
		mtch[8]=(1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6);
		mtch[9]=(1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<5)|(1<<6);
		pre();
		lts(N);
		int mt=0;
		while(N){
			mt+=ncnt[N%10];
			N/=10;
		}
		k=K;
		memset(dp,-1,sizeof dp);
		return solve(0,0,mt,"");
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	NumbersAndMatches *obj;
	long long answer;
	obj = new NumbersAndMatches();
	clock_t startTime = clock();
	answer = obj->differentNumbers(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	long long p0;
	int p1;
	long long p2;

	{
		// ----- test 0 -----
		p0 = 10ll;
		p1 = 1;
		p2 = 4ll;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 23ll;
		p1 = 1;
		p2 = 4ll;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 66ll;
		p1 = 2;
		p2 = 15ll;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 888888888ll;
		p1 = 100;
		p2 = 1ll;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 444444444444444444ll;
		p1 = 2;
		p2 = 1ll;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

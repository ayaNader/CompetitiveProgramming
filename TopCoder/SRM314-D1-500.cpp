#include <bits/stdc++.h>

using namespace std;

class GrasslandFencer {
public:
	vector<int>f;
	double area(double a,double b,double c){
		double p=(a+b+c)/2.0;
		return sqrt(p*(p-a)*(p-b)*(p-c));
	}
	double dp[1<<16];
	double go(int vis){
		double ret=0;
		if(dp[vis]!=-1.0)
			return dp[vis];
		for(short a=0;a<f.size();a++){
			for(short b=a+1;b<f.size();b++){
				for(short c=b+1;c<f.size();c++){
					if(!(vis&(1<<a))&&!(vis&(1<<b))&&!(vis&(1<<c)))
						if(f[a]+f[b]>f[c])
							ret=max(ret,area(f[a],f[b],f[c])+go(vis|(1<<a)|(1<<b)|(1<<c)));
				}
			}
		}
		return dp[vis]=ret;
	}
	double maximalFencedArea(vector <int> fences) {
		f=fences;
		for(int i=0;i<(1<<16);i++)dp[i]=-1;
		return go(0);
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	GrasslandFencer *obj;
	double answer;
	obj = new GrasslandFencer();
	clock_t startTime = clock();
	answer = obj->maximalFencedArea(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	double p1;

	{
		// ----- test 0 -----
		int t0[] = {3,4,5,6,7,8,9};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 36.754383146489694;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

		{
			// ----- test 1 -----
			int t0[] = {1,2,4,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
			p1 = 0.0;
			all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
			// ------------------
		}

		{
			// ----- test 2 -----
			int t0[] = {7,4,4,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
			p1 = 6.928203230275509;
			all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
			// ------------------
		}

		{
			// ----- test 3 -----
			int t0[] = {21,72,15,55,16,44,54,63,69,35,75,69,76,70,50,81};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
			p1 = 7512.322360676162;
			all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
			// ------------------
		}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

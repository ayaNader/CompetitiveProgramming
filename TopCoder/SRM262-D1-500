/*
   idea:
   - brute force
   - looping through first 5 numbers taking 0-5 of these numbers
   - looping again through the next left numbers 
   - taking the rest of the numbers to complete the set of 5
   - everytime checking the score of the current string
*/


#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define all(x) x.begin(),x.end()

class BestYahtzeeScore {
public:
	int check(string s){
		int arr[7]={0};
		for(int i=0;i<s.length();i++){
			arr[s[i]-48]++;
		}
		bool tw=false,tr=false;
		for(int i=1;i<=6;i++){
			if(arr[i]>=5)return 50;
			else if(arr[i]==4)return s[0]+s[1]+s[2]+s[3]+s[4]-48*5;
			else if(arr[i]==2)tw=true;
			else if(arr[i]==3)tr=true;
		}
		if(arr[1]&&arr[2]&&arr[3]&&arr[4]&&arr[5])return 40;
		if(arr[2]&&arr[3]&&arr[4]&&arr[5]&&arr[6])return 40;
		if(arr[1]&&arr[2]&&arr[3]&&arr[4])return 30;
		if(arr[2]&&arr[3]&&arr[4]&&arr[5])return 30;
		if(arr[3]&&arr[4]&&arr[5]&&arr[6])return 30;
		if(tw&&tr)return 25;
		return 0;
	}
	int bestScore(string rolls) {
		int res=0;
		for(int i=0;i<=5;i++){
			string sub1=rolls.substr(0,5);
			sort(all(sub1));
			do{
				string tmp=sub1.substr(0,i);
				if(i==5)res=max(res,check(tmp));
				for(int j=0;j<=5-i;j++){
					string sub2=rolls.substr(5,5-i);
					sort(all(sub2));
					do{
						string tmp2=sub2.substr(0,j);
						if(i+j==5)res=max(res,check(tmp+tmp2));
						string sub3=rolls.substr(10-i,5-i-j);
						sort(all(sub3));
						do{
							string tmp3=tmp+tmp2+sub3.substr(0,5-i-j);
							res=max(res,check(tmp3));
						}while(next_permutation(all(sub3)));
					}while(next_permutation(all(sub2)));
				}
			}while(next_permutation(all(sub1)));
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	BestYahtzeeScore *obj;
	int answer;
	obj = new BestYahtzeeScore();
	clock_t startTime = clock();
	answer = obj->bestScore(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;

	{
		// ----- test 0 -----
		p0 = "354621111111111";
		p1 = 50;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "666663213214444";
		p1 = 50;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "652353235164412";
		p1 = 40;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "265241155222313";
		p1 = 25;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = "144165526421151";
		p1 = 0;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

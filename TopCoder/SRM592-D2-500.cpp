/*
   idea:
   - first thought of dp approach..didn't work
   - thought of getting permutation of the resulting set for example for N=3 -> {1,1,2} {1,1,3} {1,2,2} {1,2,3} {1,3,3} {2,2,3} {2,3,3}
   - then choosing the sets whose sum would be >= k
   - in this case if k=8 then only {2,3,3} is valid
   - then try to find all possible permutations which when compared to {2,3,3} would be valid (values corresponding to each
   number would be <= to it so here 2 takes only 1, and 3 takes 1 and 2
   - then finding different ways for having such pares and multipying by 2 
   - the idea is correct but time might have not passed
*/


#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LittleElephantAndPermutationDiv2 {
public:
	long long fact(long long n){
		long long res=1;
		while(n){
			res*=n;n--;
		}
		return res;
	}
	long long getNumber(int N, int K) {
		vector<int>v(N);
		long long res=0;
		long long ad=fact(N);
		for(int i=0;i<N;i++)v[i]=i+1;
		vector<int>p(v);
		do{
			int tmp=0;
			for(int i=0;i<N;i++){
				tmp+=max(v[i],p[i]);
			}
			if(tmp>=K)res+=ad;
		}while(next_permutation(p.begin(),p.end()));
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	LittleElephantAndPermutationDiv2 *obj;
	long long answer;
	obj = new LittleElephantAndPermutationDiv2();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	long long p2;

	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 8;
	p2 = 18ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 47;
	p2 = 13168189440000ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

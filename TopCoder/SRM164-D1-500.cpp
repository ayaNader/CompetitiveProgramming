/* 
   idea:
   - sorting all possible ways and checking for all matches
   - negating weights so it can be sorted decendingly
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class WhatSort {
public:
	string sortType(vector <string> name, vector <int> age, vector <int> wt) {
		int n=name.size();
		int na=1,nw=2,an=3,aw=4,wa=5,wn=6;
		string ans[]={"NOT","NAW","NWA","ANW","AWN","WAN","WNA","IND"};
		vector<pair<string,pair<int,int>>>naw(n),nwa(n);
		vector<pair<int,pair<string,int>>>anw(n),wna(n);
		vector<pair<int,pair<int,string>>>awn(n),wan(n);
		for(int i=0;i<n;i++)wt[i]*=-1;
		for(int i=0;i<n;i++){
			naw[i].first=name[i],naw[i].second.first=age[i],naw[i].second.second=wt[i];
			nwa[i].first=name[i],nwa[i].second.first=wt[i],nwa[i].second.second=age[i];
			anw[i].first=age[i],anw[i].second.first=name[i],anw[i].second.second=wt[i];
			awn[i].first=age[i],awn[i].second.first=wt[i],awn[i].second.second=name[i];
			wna[i].first=wt[i],wna[i].second.first=name[i],wna[i].second.second=age[i];
			wan[i].first=wt[i],wan[i].second.first=age[i],wan[i].second.second=name[i];
		}
		sort(naw.begin(),naw.end());
		sort(nwa.begin(),nwa.end());
		sort(anw.begin(),anw.end());
		sort(awn.begin(),awn.end());
		sort(wna.begin(),wna.end());
		sort(wan.begin(),wan.end());
		for(int i=0;i<n;i++){
			if(naw[i].first!=name[i]||naw[i].second.first!=age[i]||naw[i].second.second!=wt[i])
				na=0;
			if(nwa[i].first!=name[i]||nwa[i].second.first!=wt[i]||nwa[i].second.second!=age[i])
				nw=0;
			if(anw[i].first!=age[i]||anw[i].second.first!=name[i]||anw[i].second.second!=wt[i])
				an=0;
			if(awn[i].first!=age[i]||awn[i].second.first!=wt[i]||awn[i].second.second!=name[i])
				aw=0;
			if(wna[i].first!=wt[i]||wna[i].second.first!=name[i]||wna[i].second.second!=age[i])
				wn=0;
			if(wan[i].first!=wt[i]||wan[i].second.first!=age[i]||wan[i].second.second!=name[i])
				wa=0;
		}
		int cnt=0;
		if(na)cnt++;if(nw)cnt++;if(an)cnt++;if(aw)cnt++;if(wa)cnt++;if(wn)cnt++;
		if(cnt==0)return ans[0];
		else if(cnt>1)return ans[7];
		else return ans[na+nw+an+aw+wa+wn];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, vector <int> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	WhatSort *obj;
	string answer;
	obj = new WhatSort();
	clock_t startTime = clock();
	answer = obj->sortType(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <int> p1;
	vector <int> p2;
	string p3;

	{
		// ----- test 0 -----
		string t0[] = {"BOB","BOB","DAVE","JOE"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {22,35,35,30};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {122,122,195,200};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = "IND";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"BOB","BOB","DAVE","DAVE"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {22,35,35,30};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {122,122,195,200};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = "NOT";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"BOB","BOB","DAVE","DAVE"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {22,35,35,30};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {122,122,195,190};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = "NWA";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

/*
  idea:
  - saving 2d arrays for the way each number is represented
  - saving all possible numbers that can be put in each position
  - calclating the total by adding each number that can be represented in each position*10(number of digits after it)*number of all 
  possible combinations that can be done with other numbers in other positions
  - diving the total with the product of the number of possible digits that can be represented in each position
*/
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

class FloorIndicator {
public:
	vector<vector<vector<char>>>allind;
	void filll(vector<vector<char>>&ind,short num){
		//--0--
		if(num==0){
			for(short i=0;i<5;i++)
				ind[i][0]=ind[i][2]='#';
			ind[0][1]=ind[4][1]='#';
		}
		//--1--
		if(num==1){
			for(short i=0;i<5;i++)
				ind[i][2]='#';
		}
		//--2--
		if(num==2){
			for(short i=0;i<3;i++)
				ind[0][i]=ind[2][i]=ind[4][i]='#';
			ind[1][2]=ind[3][0]='#';
		}
		//--3--
		if(num==3){
			for(short i=0;i<3;i++)
				ind[0][i]=ind[2][i]=ind[4][i]='#';
			ind[1][2]=ind[3][2]='#';
		}
		//--4--
		if(num==4){
			for(short i=0;i<5;i++)
				ind[i][2]='#';
			ind[0][0]=ind[1][0]=ind[2][0]=ind[2][1]='#';
		}
		//--5--
		if(num==5){
			for(short i=0;i<3;i++)
				ind[0][i]=ind[2][i]=ind[4][i]='#';
			ind[1][0]=ind[3][2]='#';
		}
		//--6--
		if(num==6){
			for(short i=0;i<3;i++)
				ind[0][i]=ind[2][i]=ind[4][i]='#';
			ind[1][0]=ind[3][0]=ind[3][2]='#';
		}
		//--7--
		if(num==7){
			for(short i=0;i<5;i++)
				ind[i][2]='#';
			ind[0][0]=ind[0][1]='#';
		}
		//--8--
		if(num==8){
			for(short i=0;i<5;i++)
				ind[i][0]=ind[i][2]='#';
			for(short i=0;i<3;i++)
				ind[0][i]=ind[2][i]=ind[4][i]='#';
		}
		//--9--
		if(num==9){
			for(short i=0;i<5;i++)
				ind[i][2]='#';
			for(short i=0;i<3;i++)
				ind[0][i]=ind[2][i]=ind[4][i]='#';
			ind[1][0]='#';
		}

	}
	ll mypow(ll b,ll p){
		if(p==0)
			return 1ll;
		ll res=mypow(b,p/2);
		res*=res;
		if(p%2)
			res*=b;
		return res;
	}
	double averageFloor(int N, vector <string> indicator) {
		allind.resize(10);
		for(int i=0;i<10;i++){
			allind[i].resize(5);
			for(short j=0;j<5;j++)
				allind[i][j].resize(3);
		}
		for(short i=0;i<=9;i++)
			for(short j=0;j<5;j++)
				for(short k=0;k<3;k++)
					allind[i][j][k]='.';
		for(short i=0;i<=9;i++)
			filll(allind[i],i);
		vector<vector<short>>num(N);
		short pos=0;
		for(short i=0;i<indicator[0].size();i+=4){
			vector<vector<char>>tmp(5);
			for(short j=0;j<5;j++){
				tmp[j].resize(3);
				for(short k=0;k<3;k++){
					tmp[j][k]=indicator[j][i+k];
				}
			}
			for(short t=0;t<=9;t++){
				vector<vector<char>>tst=tmp;
				filll(tst,t);
				if(tst==allind[t])
					num[pos].push_back(t);
			}
			pos++;
		}
		int tot=1;
		for(short i=0;i<num.size();i++){
			if(!num[i].size())
				return -1.0;
				tot*=num[i].size();
		}
		for(short i=3;i<indicator.size();i+=4)
			for(short j=0;j<5;j++)
				if(indicator[j][i]=='#')
					return -1.0;
		double ret=0;
		for(short i=0;i<N;i++){
			for(short j=0;j<num[i].size();j++)
				ret+=(ll)num[i][j]*mypow(10,N-i-1)*(ll)tot/(ll)num[i].size();
		}
		ret/=tot;
		return ret;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FloorIndicator *obj;
	double answer;
	obj = new FloorIndicator();
	clock_t startTime = clock();
	answer = obj->averageFloor(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <string> p1;
	double p2;

	{
		// ----- test 0 -----
		p0 = 1;
		string t1[] = {"###","#.#","###","#.#","###"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 8.0;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 2;
		string t1[] = {"###.###","#.#.#.#","#.#.###","#.#...#","###.###"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 48.5;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 2;
		string t1[] = {".......",".......",".......",".......","......."};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 49.5;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 1;
		string t1[] = {"...",".#.","...","...","..."};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = -1.0;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

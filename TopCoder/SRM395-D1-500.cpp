#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
class Skyscrapers {
public:
	ll mod=1000000007;
	ll dp[105][105][105];
	ll go(int n,int l,int r){
		if(n==1){
			if(l==1&&r==1)
				return 1ll;
			return 0ll;
		}
		if(l<1||r<1)
			return 0;
		if(dp[n][l][r]!=-1)
			return dp[n][l][r];
		dp[n][l][r]=((go(n-1,l-1,r)%mod)+(go(n-1,l,r-1)%mod)+(((n-2)%mod)*(go(n-1,l,r)%mod))%mod)%mod;
		return dp[n][l][r];
	}
	int buildingCount(int N, int leftSide, int rightSide) {
		memset(dp,-1,sizeof dp);
		return go(N,leftSide,rightSide);
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Skyscrapers *obj;
	int answer;
	obj = new Skyscrapers();
	clock_t startTime = clock();
	answer = obj->buildingCount(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 2;
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 2;
	p2 = 1;
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 3;
	p2 = 2;
	p3 = 18;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 12;
	p1 = 1;
	p2 = 1;
	p3 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 8;
	p1 = 3;
	p2 = 2;
	p3 = 4872;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

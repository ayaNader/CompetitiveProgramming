#include <bits/stdc++.h>

using namespace std;

class ContractWork {
public:
	int stl(string s){
		int ret=0;
		for(int i=0;i<s.length();i++){
			ret*=10;
			ret+=(s[i]-48);
		}
		return ret;
	}
	vector<vector<int>>v;
	int tasks;
	int dp[55][55][4];
	int go(short comp,short tsk,short cnt){
		if(tsk==tasks)
			return 0;
		int ret=1e9;
		if(dp[comp][tsk][cnt]!=-1)
			return dp[comp][tsk][cnt];
		for(int i=0;i<v.size();i++){
			if(i==comp){
				if(cnt==2)
					continue;
				int tmp=go(i,tsk+1,cnt+1)+v[i][tsk];
				ret=min(ret,tmp);
			}
			else{
				int tmp=go(i,tsk+1,1)+v[i][tsk];
				ret=min(ret,tmp);
			}
		}
		return dp[comp][tsk][cnt]=ret;
	}
	int minimumCost(vector <string> costs, int numTasks) {
		v.resize(costs.size());
		tasks=numTasks;
		memset(dp,-1,sizeof dp);
		for(int i=0;i<costs.size();i++){
			int f=costs[i].find(' ');
			while(f!=-1){
				v[i].push_back(stl(costs[i].substr(0,f)));
				costs[i].erase(0,f+1);
				f=costs[i].find(' ');
			}
			v[i].push_back(stl(costs[i].substr(0,costs[i].length())));
		}
		return go(0,0,0);
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	ContractWork *obj;
	int answer;
	obj = new ContractWork();
	clock_t startTime = clock();
	answer = obj->minimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	string t0[] = {"1 2 3","4 5 6"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 9;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"1 1 1 1","1 1 1 1","1 1 1 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"12 14 4 11 0 35","44 41 1 1 0 15","35 1 35 55 1 13","0 0 0 0 0 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"44 92 2 78 13","36 47 76 41 71","59 27 59 35 16","40 63 7 72 76","49 80 45 67 33"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 113;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

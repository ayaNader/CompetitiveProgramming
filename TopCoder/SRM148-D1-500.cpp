/*
  idea: 
  - trying all possible combinations of numbers and adding the valid ones to a set and returning the set's size
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MNS {
public:
	set<vector<int>>c;
	bool check(vector<int>v){
		set<int>s;
		for(int i=0;i<7;i+=3){
			int tmp=0;
			for(int j=0;j<3;j++){
				tmp+=v[i+j];
			}
			s.insert(tmp);
		}
		for(int i=0;i<3;i++){
			int tmp=0;
			for(int j=0;j<7;j+=3){
				tmp+=v[i+j];
			}
			s.insert(tmp);
		}
		return s.size()==1;
	}

	int combos(vector <int> numbers) {
		sort(numbers.begin(),numbers.end());
		do{
			if(check(numbers))
				c.insert(numbers);
		}while(next_permutation(numbers.begin(),numbers.end()));
		return c.size();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	MNS *obj;
	int answer;
	obj = new MNS();
	clock_t startTime = clock();
	answer = obj->combos(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
		// ----- test 0 -----
		int t0[] = {1,2,3,3,2,1,2,2,2};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 18;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = {4,4,4,4,4,4,4,4,4};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = {1,5,1,2,5,6,2,3,2};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 36;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = {1,2,6,6,6,4,2,6,4};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

/*
   idea:
   - there are 2*n different actions (n of which are going to pick some one up and n to drop them off)
   - trying all different permutations fo such actions but making sure a drop off doesnt occur without a previous pick 
   for the same person
   - then calculating time from the current position to the target position
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

typedef long long ll;

class SmartElevator {
public:
	int n;
	bool check(vector<int>v){
		int vis[n];memset(vis,0,sizeof vis);
		for(int i=0;i<v.size();i++){
			if(v[i]>=n&&vis[v[i]-n]==0)return false;
			else if(v[i]<n)vis[v[i]]=1;
		}
		return true;
	}
	int timeWaiting(vector <int> arrivalTime, vector <int> startingFloor, vector <int> destinationFloor) {
		n=arrivalTime.size();
		vector<int>v(2*n);
		for(int i=0;i<2*n;i++)v[i]=i;
		int res=1e7;
		do{
			int tmp=0;
			int cur=1;
			if(!check(v))continue;
			for(int i=0;i<v.size();i++){
				if(v[i]<n){
					tmp+=max(abs(startingFloor[v[i]]-cur),max(0,arrivalTime[v[i]]-tmp));
					cur=startingFloor[v[i]];
				}
				else{
					tmp+=abs(destinationFloor[v[i]-n]-cur);
					cur=destinationFloor[v[i]-n];
				}
			}
			res=min(res,tmp);
		}while(next_permutation(v.begin(),v.end()));
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	SmartElevator *obj;
	int answer;
	obj = new SmartElevator();
	clock_t startTime = clock();
	answer = obj->timeWaiting(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;

	{
		// ----- test 0 -----
		int t0[] = {5};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {30};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {50};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 49;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = {100};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {30};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {50};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 120;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = {10,120};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {1,100};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {210,200};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 230;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = {10,500};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {1,100};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {210,200};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 600;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = {1000,1200,1600,2000,2400};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {500,500,500,500,500};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {700,300,700,300,700};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 2600;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		int t0[] = {775397,261225,870141,287698,884334};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {82225,958610,998971,413596,21922};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {769962,78706,477861,237168,258488};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 2724059;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
